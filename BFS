from collections import deque

def bfs(graph, start):
    visited = set()  # Set to keep track of visited nodes
    queue = deque([start])  # Initialize a queue with the start node
    
    while queue:
        node = queue.popleft()  # Dequeue a node from the front of the queue
        
        if node not in visited:
            print(node, end=" ")  # Process the node (print it)
            visited.add(node)  # Mark the node as visited
            
            # Enqueue all adjacent unvisited nodes
            for neighbor in graph[node]:
                if neighbor not in visited:
                    queue.append(neighbor)

# Example usage
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F', 'G'],
    'D': ['B'],
    'E': ['B'],
    'F': ['C'],
    'G': ['C']
}

print("BFS traversal starting from node 'A':")
bfs(graph, 'A')
