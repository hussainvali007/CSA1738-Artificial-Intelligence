import math

# Constants for the game
PLAYER_X = 'X'
PLAYER_O = 'O'
EMPTY = ' '

def create_board():
    return [[EMPTY for _ in range(3)] for _ in range(3)]

def print_board(board):
    for row in board:
        print(' | '.join(row))
        print('-' * 5)

def is_winner(board, player):
    # Check rows
    for row in board:
        if all([cell == player for cell in row]):
            return True

    # Check columns
    for col in range(3):
        if all([board[row][col] == player for row in range(3)]):
            return True

    # Check diagonals
    if all([board[i][i] == player for i in range(3)]):
        return True
    if all([board[i][2-i] == player for i in range(3)]):
        return True

    return False

def is_full(board):
    return all([cell != EMPTY for row in board for cell in row])

def get_valid_moves(board):
    return [(r, c) for r in range(3) for c in range(3) if board[r][c] == EMPTY]

def evaluate_board(board):
    if is_winner(board, PLAYER_X):
        return 10
    elif is_winner(board, PLAYER_O):
        return -10
    else:
        return 0

def minimax(board, depth, alpha, beta, is_maximizing):
    score = evaluate_board(board)

    # If the game is over
    if is_winner(board, PLAYER_X):
        return 10 - depth
    if is_winner(board, PLAYER_O):
        return depth - 10
    if is_full(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for move in get_valid_moves(board):
            r, c = move
            board[r][c] = PLAYER_X
            score = minimax(board, depth + 1, alpha, beta, False)
            board[r][c] = EMPTY
            best_score = max(score, best_score)
            alpha = max(alpha, score)
            if beta <= alpha:
                break
        return best_score
    else:
        best_score = math.inf
        for move in get_valid_moves(board):
            r, c = move
            board[r][c] = PLAYER_O
            score = minimax(board, depth + 1, alpha, beta, True)
            board[r][c] = EMPTY
            best_score = min(score, best_score)
            beta = min(beta, score)
            if beta <= alpha:
                break
        return best_score

def find_best_move(board):
    best_move = None
    best_value = -math.inf

    for move in get_valid_moves(board):
        r, c = move
        board[r][c] = PLAYER_X
        move_value = minimax(board, 0, -math.inf, math.inf, False)
        board[r][c] = EMPTY
        if move_value > best_value:
            best_value = move_value
            best_move = move

    return best_move

def main():
    board = create_board()
    current_player = PLAYER_X

    while True:
        print_board(board)
        if current_player == PLAYER_X:
            print("Player X's turn")
            move = find_best_move(board)
            if move:
                r, c = move
                board[r][c] = PLAYER_X
        else:
            print("Player O's turn")
            move = find_best_move(board)
            if move:
                r, c = move
                board[r][c] = PLAYER_O

        if is_winner(board, PLAYER_X):
            print_board(board)
            print("Player X wins!")
            break
        elif is_winner(board, PLAYER_O):
            print_board(board)
            print("Player O wins!")
            break
        elif is_full(board):
            print_board(board)
            print("It's a tie!")
            break

        current_player = PLAYER_O if current_player == PLAYER_X else PLAYER_X

if __name__ == "__main__":
    main()
