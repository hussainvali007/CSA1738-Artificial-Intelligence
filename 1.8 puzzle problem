import heapq

class PuzzleState:
    def _init_(self, board, goal, moves=0, previous=None):
        self.board = board
        self.goal = goal
        self.moves = moves
        self.previous = previous

    def _lt_(self, other):
        return self.cost() < other.cost()

    def cost(self):
        return self.moves + self.heuristic()

    def heuristic(self):
        # Manhattan distance heuristic
        distance = 0
        for i in range(3):
            for j in range(3):
                if self.board[i][j] != 0:
                    x, y = divmod(self.board[i][j] - 1, 3)
                    distance += abs(x - i) + abs(y - j)
        return distance

    def is_goal(self):
        return self.board == self.goal

    def get_neighbors(self):
        neighbors = []
        x, y = next((i, j) for i in range(3) for j in range(3) if self.board[i][j] == 0)
        directions = [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]
        
        for i, j in directions:
            if 0 <= i < 3 and 0 <= j < 3:
                new_board = [row[:] for row in self.board]
                new_board[x][y], new_board[i][j] = new_board[i][j], new_board[x][y]
                neighbors.append(PuzzleState(new_board, self.goal, self.moves + 1, self))
        
        return neighbors

    def print_path(self):
        if self.previous:
            self.previous.print_path()
        for row in self.board:
            print(row)
        print()

def solve_puzzle(start, goal):
    initial_state = PuzzleState(start, goal)
    frontier = []
    heapq.heappush(frontier, initial_state)
    explored = set()

    while frontier:
        state = heapq.heappop(frontier)

        if state.is_goal():
            state.print_path()
            return state.moves

        explored.add(tuple(map(tuple, state.board)))

        for neighbor in state.get_neighbors():
            if tuple(map(tuple, neighbor.board)) not in explored:
                heapq.heappush(frontier, neighbor)
    
    return -1

# Example usage:
start = [
    [1, 2, 3],
    [4, 0, 5],
    [7, 8, 6]
]

goal = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 0]
]

solve_puzzle(start, goal)
