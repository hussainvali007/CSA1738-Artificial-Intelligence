def dfs(graph, start, visited=None):
    # Initialize the set of visited nodes if it's not already provided
    if visited is None:
        visited = set()
    
    # Mark the current node as visited
    visited.add(start)
    print(start, end=' ')

    # Recursively visit all the neighbors of the current node
    for neighbor in graph[start]:
        if neighbor not in visited:
            dfs(graph, neighbor, visited)
    
    # Return the set of visited nodes for potential further use
    return visited

# Example usage:
if __name__ == "__main__":
    # Define a sample graph as an adjacency list
    graph = {
        'A': ['B', 'C'],
        'B': ['D', 'E'],
        'C': ['F'],
        'D': [],
        'E': ['F'],
        'F': []
    }

    print("DFS traversal starting from 'A':")
    dfs(graph, 'A')
