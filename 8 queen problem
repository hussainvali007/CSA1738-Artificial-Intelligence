def print_board(board):
    for row in board:
        print(" ".join("Q" if col else "." for col in row))
    print()

def is_safe(board, row, col, n):
    # Check the column
    for i in range(row):
        if board[i][col]:
            return False
    
    # Check the upper left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j]:
            return False
    
    # Check the upper right diagonal
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if board[i][j]:
            return False
    
    return True

def solve_n_queens_util(board, row, n):
    if row >= n:
        return True

    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = True

            if solve_n_queens_util(board, row + 1, n):
                return True

            board[row][col] = False

    return False

def solve_n_queens(n):
    board = [[False] * n for _ in range(n)]

    if solve_n_queens_util(board, 0, n):
        print_board(board)
        return True
    else:
        print("No solution exists")
        return False

# Solve the 8-Queen problem
solve_n_queens(8)
